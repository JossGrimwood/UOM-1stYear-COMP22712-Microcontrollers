KMD
00000000: EA000041    ; B MAIN
00000004:             ; INCLUDE print.s
00000004:             ; ; Author: Jocelyn Grimwood
00000004:             ; ; Print functions
00000004:             ; ; **************************************
00000004:             ; ; DO NOT USE FUNCTIONS IN BLOCK CAPITALS
00000004:             ; ; **************************************
00000004:             ; ; pass paramters on r0
00000004:             ; ; usefull functions:
00000004:             ; ;       PrintString - pass pointer to array with null terminating character (accepts newline ch
                      ; aracter)
00000004:             ; ;       PrintChar - pass char in register
00000004:             ; ;       MoveToLine1/2 - pass character position of respective line
00000004:             ; ;       NewLine - no input
00000004:             ; ;       Clear - no input
00000004:             ; ; memory loactions
00000004:             ; IO  EQU &1000_0000
00000004:             ; CONTROL EQU &4
00000004:             ; DATA EQU &0
00000004:             ; 
00000004:             ; ; Mask for LCD busy
00000004:             ; BUSY_MASK EQU 0B1000_0000
00000004:             ; 
00000004:             ; NULL_CHAR EQU 0
00000004:             ; NEW_LINE EQU &0A
00000004:             ; 
00000004:             ; ; settings for writing commands to LCD
00000004:             ; PREP_COMMAND EQU 0B0010_0000
00000004:             ; ENABLE_COMMAND EQU 0B0010_0001
00000004:             ; END_COMMAND EQU 0B0010_0000
00000004:             ; FORMFEAD EQU &01
00000004:             ; LINEFEAD EQU &C0
00000004:             ; STARTPOS1 EQU &80
00000004:             ; STARTPOS2 EQU &C0
00000004:             ; 
00000004:             ; ; settings for read from LCD
00000004:             ; PREP_READ EQU 0B0010_0100
00000004:             ; ENABLE_READ EQU 0B0010_0101
00000004:             ; END_READ EQU 0B0010_0100
00000004:             ; 
00000004:             ; ; setting for write to LCD
00000004:             ; PREP_WRITE EQU 0B0010_0010
00000004:             ; ENABLE_WRITE EQU 0B0010_0011
00000004:             ; END_WRITE EQU 0B0010_0010
00000004:             ; 
00000004:             ; PrintString ; write string indexed by r0
00000004: E92D4003    ;         PUSH {LR, R0-R1}            ; Push used registers
00000008: E1A01000    ;         MOV R1, R0
0000000C:             ; 
0000000C:             ;     NEXT_CHAR                       ; Loop through char array
0000000C: E4D10001    ;         LDRB R0, [R1], #1           ; Load char and post increment address
00000010: E3500000    ;         CMP R0, #NULL_CHAR          ; Check not end of array
00000014: 0A000005    ;         BEQ EOS                     ; If end branch to End Of String
00000018: E350000A    ;         CMP R0, #NEW_LINE           ; Check for new line
0000001C: 1A000001    ;         BNE Char                    ; Jump to write char
00000020: EB00000E    ;         BL NewLine                  ; Write new line
00000024: EAFFFFF8    ;         B NEXT_CHAR                 ; Loop for nxt char
00000028:             ;     Char
00000028: EB000001    ;         BL PrintChar                ; Print loaded char 
0000002C: EAFFFFF6    ;         B NEXT_CHAR                 ; Loop for next char
00000030:             ;     EOS
00000030:             ;         
00000030: E8BD8003    ;         POP {PC, R0-R1}             ; Pop registers back and update pc
00000034:             ; 
00000034:             ; PrintChar   ; write single Char from r0
00000034: E92D400F    ;         PUSH {LR, R0-R3}            ; Push used registers
00000038: E3A01201    ;         MOV R1, #IO                 ; Setup location of IO
0000003C: EB000011    ;         BL CHECK_BUSY               ; Check LCD busy
00000040: EB00001A    ;         BL WRITE_CHAR               ; Write to LCD
00000044: E8BD800F    ;         POP {PC, R0-R3}             ; Pop registers back and update pc
00000048:             ; 
00000048:             ; 
00000048:             ; ; *********** Folowing procedures for commands only
00000048:             ; MoveToLine1
00000048: E92D400F    ;         PUSH {LR, R0-R3}            ; Push used registers
0000004C: E2800080    ;         ADD R0, R0, #STARTPOS1      ; Setup offset
00000050: EA000008    ;         B SETUP_COMMAND             ; Run command
00000054:             ; MoveToLine2
00000054: E92D400F    ;         PUSH {LR, R0-R3}            ; Push used registers
00000058: E28000C0    ;         ADD R0, R0, #STARTPOS2      ; Setup offset
0000005C: EA000005    ;         B SETUP_COMMAND             ; Run command
00000060:             ; NewLine
00000060: E92D400F    ;         PUSH {LR, R0-R3}            ; Push used registers
00000064: E3A000C0    ;         MOV R0, #LINEFEAD           ; Set line feed character
00000068: EA000002    ;         B SETUP_COMMAND             ; Run command
0000006C:             ; Clear   
0000006C: E92D400F    ;         PUSH {LR, R0-R3}            ; Push used registers
00000070: E3A00001    ;         MOV R0, #FORMFEAD           ; Set clear character
00000074: EAFFFFFF    ;         B SETUP_COMMAND             ; Run command
00000078:             ; 
00000078:             ; SETUP_COMMAND
00000078: E3A01201    ;         MOV R1, #IO                 ; Setup location of IO
0000007C: EB000001    ;         BL CHECK_BUSY               ; Check LCD busy
00000080: EB000012    ;         BL WRITE_COMMAND            ; Write to LCD
00000084: E8BD800F    ;         POP {PC, R0-R3}             ; Pop registers back and update pc
00000088:             ; 
00000088:             ; 
00000088:             ; ; *********** Folowing procedures not for user
00000088:             ; CHECK_BUSY
00000088: E3A02024    ;         MOV R2, #PREP_READ          ; Set signal and R/W lines
0000008C: E5C12004    ;         STRB R2, [R1, #CONTROL]
00000090:             ;     BUSY  ; Read response from LCD and repeat untill free
00000090: E3A02025    ;         MOV R2, #ENABLE_READ        ; Enable read
00000094: E5C12004    ;         STRB R2, [R1, #CONTROL]
00000098: E5D13000    ;         LDRB R3, [R1, #DATA]        ; Read data
0000009C: E3A02024    ;         MOV R2, #END_READ           ; Set enable low
000000A0: E5C12004    ;         STRB R2, [R1, #CONTROL]     
000000A4: E3130080    ;         TST R3, #BUSY_MASK          ; Check LCD is not busy with mask
000000A8: 1AFFFFF8    ;         BNE BUSY
000000AC: E1A0F00E    ;         MOV PC, LR                  ; Exit method
000000B0:             ; 
000000B0:             ; WRITE_CHAR ; Write single Char in r0 to LCD
000000B0: E3A02022    ;         MOV R2, #PREP_WRITE         ; Set signal and R/W lines
000000B4: E5C12004    ;         STRB R2, [R1, #CONTROL]
000000B8:             ; 
000000B8: E5C10000    ;         STRB R0, [R1, #DATA]        ; Write Char in advance of enable 
000000BC:             ; 
000000BC: E3A02023    ;         MOV R2, #ENABLE_WRITE       ; Pulse enable to write char
000000C0: E5C12004    ;         STRB R2, [R1, #CONTROL]
000000C4: E3A02022    ;         MOV R2, #END_WRITE
000000C8: E5C12004    ;         STRB R2, [R1, #CONTROL]
000000CC: E1A0F00E    ;         MOV PC, LR                  ; Exit method
000000D0:             ; 
000000D0:             ; WRITE_COMMAND   
000000D0: E3A02020    ;         MOV R2, #PREP_COMMAND       ; Set signal and R/W lines
000000D4: E5C12004    ;         STRB R2, [R1, #CONTROL]
000000D8:             ;         
000000D8: E5C10000    ;         STRB R0, [R1, #DATA]        ; Write command in advance of enable
000000DC:             ; 
000000DC: E3A02021    ;         MOV R2, #ENABLE_COMMAND     ; Pulse enable to write Command
000000E0: E5C12004    ;         STRB R2, [R1, #CONTROL]
000000E4: E3A02020    ;         MOV R2, #END_COMMAND
000000E8: E5C12004    ;         STRB R2, [R1, #CONTROL]
000000EC: E1A0F00E    ;         MOV PC, LR                  ; Exit method
000000F0:             ; 
000000F0:             ; 
000000F0: 48 65 6C 6C ; STRING DEFB "Hello world\nGoodbye world\0"
000000F4: 6F 20 77 6F ; 
000000F8: 72 6C 64 0A ; 
000000FC: 47 6F 6F 64 ; 
00000100: 62 79 65 20 ; 
00000104: 77 6F 72 6C ; 
00000108: 64 00       ; 
0000010C:             ; align
0000010C:             ; MAIN    
0000010C: E3A01001    ;         MOV R1, #1
00000110: E3A02002    ;         MOV R2, #2
00000114: E3A03003    ;         MOV R3, #3
00000118: E3A04004    ;         MOV R4, #4
0000011C: E3A05005    ;         MOV R5, #5
00000120: E3A06006    ;         MOV R6, #6
00000124: E28FD0F4    ;         ADR SP, STACK
00000128: E24F0040    ;         ADR R0, STRING
0000012C: EBFFFFCE    ;         BL Clear
00000130: EBFFFFB3    ;         BL PrintString
00000134:             ; 
00000134: E3A0000C    ;         MOV R0, #12
00000138: EBFFFFC2    ;         BL MoveToLine1
0000013C: E3A00048    ;         MOV R0, #&48
00000140: EBFFFFBB    ;         BL PrintChar
00000144:             ;         
00000144: E3A00006    ;         MOV R0, #6
00000148: EBFFFFC1    ;         BL MoveToLine2
0000014C: E3A00045    ;         MOV R0, #'E'
00000150: EBFFFFB7    ;         BL PrintChar
00000154: EAFFFFFE    ;         B .
00000158:             ; 
00000158:             ; DEFS 200
00000220:             ; STACK 

Symbol Table: Labels
: IO                                10000000  Value
: CONTROL                           00000004  Value
: DATA                              00000000  Value
: BUSY_MASK                         00000080  Value
: NULL_CHAR                         00000000  Value
: NEW_LINE                          0000000A  Value
: PREP_COMMAND                      00000020  Value
: ENABLE_COMMAND                    00000021  Value
: END_COMMAND                       00000020  Value
: FORMFEAD                          00000001  Value
: LINEFEAD                          000000C0  Value
: STARTPOS1                         00000080  Value
: STARTPOS2                         000000C0  Value
: PREP_READ                         00000024  Value
: ENABLE_READ                       00000025  Value
: END_READ                          00000024  Value
: PREP_WRITE                        00000022  Value
: ENABLE_WRITE                      00000023  Value
: END_WRITE                         00000022  Value
: PrintString                       00000004  Local -- ARM
: NEXT_CHAR                         0000000C  Local -- ARM
: Char                              00000028  Local -- ARM
: EOS                               00000030  Local -- ARM
: PrintChar                         00000034  Local -- ARM
: MoveToLine1                       00000048  Local -- ARM
: MoveToLine2                       00000054  Local -- ARM
: NewLine                           00000060  Local -- ARM
: Clear                             0000006C  Local -- ARM
: SETUP_COMMAND                     00000078  Local -- ARM
: CHECK_BUSY                        00000088  Local -- ARM
: BUSY                              00000090  Local -- ARM
: WRITE_CHAR                        000000B0  Local -- ARM
: WRITE_COMMAND                     000000D0  Local -- ARM
: STRING                            000000F0  Local -- ARM
: MAIN                              0000010C  Local -- ARM
: STACK                             00000220  Local -- ARM
