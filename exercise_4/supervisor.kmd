KMD
00000000: EA00001D    ; B MAIN
00000004: EAFFFFFE    ; B . ;UNDEFINED
00000008: EA000004    ; B SVC_CALL
0000000C: EAFFFFFE    ; B . ;PREFETCH
00000010: EAFFFFFE    ; B . ;DATA
00000014: E1A00000    ; NOP
00000018: EAFFFFFE    ; B . ;IRQ
0000001C: EAFFFFFE    ; B . ;FIQ
00000020:             ; 
00000020:             ; 
00000020:             ; SVC_CALL
00000020: E92D4000    ;         PUSH {LR}                   
00000024: E51EE004    ;         LDR R14, [LR, #-4]          ; load previous instruction
00000028: E3CEE4FF    ;         BIC R14, R14, #&FF000000    ; mask of bits 
0000002C: E35E0002    ;         CMP R14, #MAX_SVC           ; check svc value is valid
00000030: 8A000006    ;         BHI SVC_UNKOWN  
00000034: E08FE10E    ;         ADD R14, PC, R14, LSL #2    ; address jump table
00000038: E59EF000    ;         LDR PC, [R14, #0] 
0000003C:             ; MAX_SVC EQU 2
0000003C: 00000054    ; JUMP_TABLE  DEFW SVC_0   ;PRINT
00000040: 0000005C    ;             DEFW SVC_1   ;LCD COMMAND
00000044: 00000064    ;             DEFW SVC_2   ;halt
00000048:             ; EXIT_SVC                 
00000048: E8BD4000    ;         POP {LR}         ;return back to user code
0000004C: E1B0F00E    ;         MOVS PC, LR
00000050:             ; 
00000050:             ; SVC_UNKOWN
00000050: EAFFFFFE    ;     B .             ;SVC unknown
00000054:             ; SVC_0               ;Print char
00000054: EB00003C    ;     BL PRINT_CHAR
00000058: EAFFFFFA    ;     B EXIT_SVC
0000005C:             ; SVC_1               ;LCD command
0000005C: EB00004F    ;     BL SETUP_COMMAND  
00000060: EAFFFFF8    ;     B EXIT_SVC
00000064:             ; SVC_2               ;Halt
00000064:             ;     HALT EQU &20
00000064: E3A00201    ;     MOV R0, #IO
00000068: E3A010FF    ;     MOV R1, #&FF
0000006C: E2800020    ;     ADD R0, R0, #HALT
00000070: E5001000    ;     STR R1, [R0]
00000074: EAFFFFF3    ;     B EXIT_SVC
00000078: E1A00000    ;     NOP
0000007C:             ; 
0000007C:             ; MODE_CLEAR EQU &1F
0000007C:             ; SYSTEM EQU &1F
0000007C:             ; SUPERVISOR EQU &13
0000007C:             ; MAIN 
0000007C: E28FDF7F    ;         ADR SP, SVC_STACK   ; Setup supervisor stack
00000080:             ;         
00000080: E10F0000    ;         MRS R0, CPSR                 ; switch to system
00000084: E3C0001F    ;         BIC R0, R0, #MODE_CLEAR      ; clear mode
00000088: E380001F    ;         ORR R0, R0, #SYSTEM          ; set system mode
0000008C: E121F000    ;         MSR CPSR_c, R0               ; APPLY MODE
00000090:             ; 
00000090: E28FDF93    ;         ADR SP, USR_STACK   ; Setup supervisor stack
00000094:             ;         
00000094: E10F0000    ;         MRS R0, CPSR                 ; switch to SVC
00000098: E3C0001F    ;         BIC R0, R0, #MODE_CLEAR      ; clear mode
0000009C: E3800013    ;         ORR R0, R0, #SUPERVISOR      ; set SVC mode
000000A0: E121F000    ;         MSR CPSR_c, R0               ; APPLY MODE
000000A4:             ; 
000000A4: E3A0E0D0    ;         MOV R14, #&D0       ;USERMODE
000000A8: E16FF00E    ;         MSR SPSR, R14
000000AC: E28FE000    ;         ADR R14, USR_CODE
000000B0: E1B0F00E    ;         MOVS PC, R14        ;move to user code
000000B4:             ; 
000000B4:             ; USR_CODE
000000B4:             ; INCLUDE users.s
000000B4:             ; 
000000B4: E3A01001    ;         MOV R1, #1
000000B8: E3A02002    ;         MOV R2, #2
000000BC: E3A03003    ;         MOV R3, #3
000000C0: E3A04004    ;         MOV R4, #4
000000C4: E3A05005    ;         MOV R5, #5
000000C8: E3A06006    ;         MOV R6, #6
000000CC: E28F0028    ;         ADR R0, STRING
000000D0: EB00002E    ;         BL Clear
000000D4: EB00000F    ;         BL PrintString
000000D8:             ; 
000000D8: E3A0000C    ;         MOV R0, #12
000000DC: EB00001F    ;         BL MoveToLine1
000000E0: E3A00048    ;         MOV R0, #&48
000000E4: EB000015    ;         BL PrintChar
000000E8:             ;         
000000E8: E3A00006    ;         MOV R0, #6
000000EC: EB00001F    ;         BL MoveToLine2
000000F0: E3A00045    ;         MOV R0, #'E'
000000F4: EB000011    ;         BL PrintChar
000000F8: EF000002    ;         SVC 2
000000FC: 48 65 6C 6C ;     STRING DEFB "Hello World\nGoodbye World\0"
00000100: 6F 20 57 6F ; 
00000104: 72 6C 64 0A ; 
00000108: 47 6F 6F 64 ; 
0000010C: 62 79 65 20 ; 
00000110: 57 6F 72 6C ; 
00000114: 64 00       ; 
00000118:             ; align
00000118:             ; 
00000118:             ; ; libraries
00000118:             ; INCLUDE print.s 
00000118:             ; ; Author: Jocelyn Grimwood
00000118:             ; ; Print functions
00000118:             ; ; **************************************
00000118:             ; ; DO NOT USE FUNCTIONS IN BLOCK CAPITALS
00000118:             ; ; **************************************
00000118:             ; ; pass paramters on r0
00000118:             ; ; usefull functions:
00000118:             ; ;       PrintString - pass pointer to array with null terminating character (accepts newline ch
                      ; aracter)
00000118:             ; ;       PrintChar - pass char in register
00000118:             ; ;       MoveToLine1/2 - pass character position of respective line
00000118:             ; ;       NewLine - no input
00000118:             ; ;       Clear - no input
00000118:             ; 
00000118:             ; 
00000118:             ; 
00000118:             ; ; memory loactions
00000118:             ; IO  EQU &1000_0000
00000118:             ; CONTROL EQU &4
00000118:             ; DATA EQU &0
00000118:             ; 
00000118:             ; ; Mask for LCD busy
00000118:             ; BUSY_MASK EQU 0B1000_0000
00000118:             ; 
00000118:             ; NULL_CHAR EQU 0
00000118:             ; NEW_LINE EQU &0A
00000118:             ; 
00000118:             ; ; settings for writing commands to LCD
00000118:             ; PREP_COMMAND EQU 0B0010_0000
00000118:             ; ENABLE_COMMAND EQU 0B0010_0001
00000118:             ; END_COMMAND EQU 0B0010_0000
00000118:             ; FORMFEAD EQU &01
00000118:             ; LINEFEAD EQU &C0
00000118:             ; STARTPOS1 EQU &80
00000118:             ; STARTPOS2 EQU &C0
00000118:             ; 
00000118:             ; ; settings for read from LCD
00000118:             ; PREP_READ EQU 0B0010_0100
00000118:             ; ENABLE_READ EQU 0B0010_0101
00000118:             ; END_READ EQU 0B0010_0100
00000118:             ; 
00000118:             ; ; setting for write to LCD
00000118:             ; PREP_WRITE EQU 0B0010_0010
00000118:             ; ENABLE_WRITE EQU 0B0010_0011
00000118:             ; END_WRITE EQU 0B0010_0010
00000118:             ; 
00000118:             ; PrintString ; write string indexed by r0
00000118: E92D4003    ;         PUSH {LR, R0-R1}            ; Push used registers
0000011C: E1A01000    ;         MOV R1, R0
00000120:             ; 
00000120:             ;     NEXT_CHAR                       ; Loop through char array
00000120: E4D10001    ;         LDRB R0, [R1], #1           ; Load char and post increment address
00000124: E3500000    ;         CMP R0, #NULL_CHAR          ; Check not end of array
00000128: 0A000003    ;         BEQ EOS                     ; If end branch to End Of String
0000012C: E350000A    ;         CMP R0, #NEW_LINE           ; Check for new line
00000130: 1F000000    ;         SVCNE 0                     ; Print loaded char 
00000134: 0B000011    ;         BLEQ NewLine                ; Write new line
00000138: EAFFFFF8    ;         B NEXT_CHAR                 ; Loop for next char
0000013C:             ;     EOS
0000013C: E8BD8003    ;         POP {PC, R0-R1}             ; Pop registers back and update pc
00000140:             ; 
00000140:             ; PrintChar                           ;pass through for SVC 0 
00000140: E92D4000    ;         PUSH {LR}                   
00000144: EF000000    ;         SVC 0
00000148: E8BD8000    ;         POP {PC}
0000014C:             ; 
0000014C:             ; PRINT_CHAR   ; write single Char from r0
0000014C: E92D400F    ;         PUSH {LR, R0-R3}            ; Push used registers
00000150: E3A01201    ;         MOV R1, #IO                 ; Setup location of IO
00000154: EB000016    ;         BL CHECK_BUSY               ; Check LCD busy
00000158: EB00001F    ;         BL WRITE_CHAR               ; Write to LCD
0000015C: E8BD800F    ;         POP {PC, R0-R3}             ; Pop registers back and update pc
00000160:             ; 
00000160:             ; 
00000160:             ; ; *********** Folowing procedures for commands only
00000160:             ; MoveToLine1
00000160: E92D4001    ;         PUSH {LR, R0}            ; Push used registers
00000164: E2800080    ;         ADD R0, R0, #STARTPOS1   ; Setup offset
00000168: EF000001    ;         SVC 1                    ; Run command
0000016C: E8BD8001    ;         POP {PC, R0}             ; Pop registers back and update pc
00000170:             ; MoveToLine2
00000170: E92D4001    ;         PUSH {LR, R0}            ; Push used registers
00000174: E28000C0    ;         ADD R0, R0, #STARTPOS2   ; Setup offset
00000178: EF000001    ;         SVC 1                    ; Run command
0000017C: E8BD8001    ;         POP {PC, R0}             ; Pop registers back and update pc
00000180:             ; NewLine
00000180: E92D4001    ;         PUSH {LR, R0}            ; Push used registers
00000184: E3A000C0    ;         MOV R0, #LINEFEAD        ; Set line feed character
00000188: EF000001    ;         SVC 1                    ; Run command
0000018C: E8BD8001    ;         POP {PC, R0}             ; Pop registers back and update pc
00000190:             ; Clear   
00000190: E92D4001    ;         PUSH {LR, R0}            ; Push used registers
00000194: E3A00001    ;         MOV R0, #FORMFEAD        ; Set clear character
00000198: EF000001    ;         SVC 1                    ; Run command
0000019C: E8BD8001    ;         POP {PC, R0}             ; Pop registers back and update pc
000001A0:             ; 
000001A0:             ; ; *********** Folowing procedures not for user
000001A0:             ; SETUP_COMMAND
000001A0: E92D400F    ;         PUSH {LR, R0-R3}            
000001A4: E3A01201    ;         MOV R1, #IO                 ; Setup location of IO
000001A8: EB000001    ;         BL CHECK_BUSY               ; Check LCD busy
000001AC: EB000012    ;         BL WRITE_COMMAND            ; Write to LCD
000001B0: E8BD800F    ;         POP {PC, R0-R3} 
000001B4:             ; 
000001B4:             ; CHECK_BUSY
000001B4: E3A02024    ;         MOV R2, #PREP_READ          ; Set signal and R/W lines
000001B8: E5C12004    ;         STRB R2, [R1, #CONTROL]
000001BC:             ;     BUSY  ; Read response from LCD and repeat untill free
000001BC: E3A02025    ;         MOV R2, #ENABLE_READ        ; Enable read
000001C0: E5C12004    ;         STRB R2, [R1, #CONTROL]
000001C4: E5D13000    ;         LDRB R3, [R1, #DATA]        ; Read data
000001C8: E3A02024    ;         MOV R2, #END_READ           ; Set enable low
000001CC: E5C12004    ;         STRB R2, [R1, #CONTROL]     
000001D0: E3130080    ;         TST R3, #BUSY_MASK          ; Check LCD is not busy with mask
000001D4: 1AFFFFF8    ;         BNE BUSY
000001D8: E1A0F00E    ;         MOV PC, LR                  ; Exit method
000001DC:             ; 
000001DC:             ; WRITE_CHAR ; Write single Char in r0 to LCD
000001DC: E3A02022    ;         MOV R2, #PREP_WRITE         ; Set signal and R/W lines
000001E0: E5C12004    ;         STRB R2, [R1, #CONTROL]
000001E4:             ; 
000001E4: E5C10000    ;         STRB R0, [R1, #DATA]        ; Write Char in advance of enable 
000001E8:             ; 
000001E8: E3A02023    ;         MOV R2, #ENABLE_WRITE       ; Pulse enable to write char
000001EC: E5C12004    ;         STRB R2, [R1, #CONTROL]
000001F0: E3A02022    ;         MOV R2, #END_WRITE
000001F4: E5C12004    ;         STRB R2, [R1, #CONTROL]
000001F8: E1A0F00E    ;         MOV PC, LR                  ; Exit method
000001FC:             ; 
000001FC:             ; WRITE_COMMAND   
000001FC: E3A02020    ;         MOV R2, #PREP_COMMAND       ; Set signal and R/W lines
00000200: E5C12004    ;         STRB R2, [R1, #CONTROL]
00000204:             ;         
00000204: E5C10000    ;         STRB R0, [R1, #DATA]        ; Write command in advance of enable
00000208:             ; 
00000208: E3A02021    ;         MOV R2, #ENABLE_COMMAND     ; Pulse enable to write Command
0000020C: E5C12004    ;         STRB R2, [R1, #CONTROL]
00000210: E3A02020    ;         MOV R2, #END_COMMAND
00000214: E5C12004    ;         STRB R2, [R1, #CONTROL]
00000218: E1A0F00E    ;         MOV PC, LR                  ; Exit method
0000021C:             ; 
0000021C:             ; 
0000021C:             ; DEFS 100
00000280:             ; SVC_STACK
00000280:             ; DEFS 100
000002E4:             ; USR_STACK

Symbol Table: Labels
: SVC_CALL                          00000020  Local -- ARM
: MAX_SVC                           00000002  Value
: JUMP_TABLE                        0000003C  Local -- ARM
: EXIT_SVC                          00000048  Local -- ARM
: SVC_UNKOWN                        00000050  Local -- ARM
: SVC_0                             00000054  Local -- ARM
: SVC_1                             0000005C  Local -- ARM
: SVC_2                             00000064  Local -- ARM
: HALT                              00000020  Value
: MODE_CLEAR                        0000001F  Value
: SYSTEM                            0000001F  Value
: SUPERVISOR                        00000013  Value
: MAIN                              0000007C  Local -- ARM
: USR_CODE                          000000B4  Local -- ARM
: STRING                            000000FC  Local -- ARM
: IO                                10000000  Value
: CONTROL                           00000004  Value
: DATA                              00000000  Value
: BUSY_MASK                         00000080  Value
: NULL_CHAR                         00000000  Value
: NEW_LINE                          0000000A  Value
: PREP_COMMAND                      00000020  Value
: ENABLE_COMMAND                    00000021  Value
: END_COMMAND                       00000020  Value
: FORMFEAD                          00000001  Value
: LINEFEAD                          000000C0  Value
: STARTPOS1                         00000080  Value
: STARTPOS2                         000000C0  Value
: PREP_READ                         00000024  Value
: ENABLE_READ                       00000025  Value
: END_READ                          00000024  Value
: PREP_WRITE                        00000022  Value
: ENABLE_WRITE                      00000023  Value
: END_WRITE                         00000022  Value
: PrintString                       00000118  Local -- ARM
: NEXT_CHAR                         00000120  Local -- ARM
: EOS                               0000013C  Local -- ARM
: PrintChar                         00000140  Local -- ARM
: PRINT_CHAR                        0000014C  Local -- ARM
: MoveToLine1                       00000160  Local -- ARM
: MoveToLine2                       00000170  Local -- ARM
: NewLine                           00000180  Local -- ARM
: Clear                             00000190  Local -- ARM
: SETUP_COMMAND                     000001A0  Local -- ARM
: CHECK_BUSY                        000001B4  Local -- ARM
: BUSY                              000001BC  Local -- ARM
: WRITE_CHAR                        000001DC  Local -- ARM
: WRITE_COMMAND                     000001FC  Local -- ARM
: SVC_STACK                         00000280  Local -- ARM
: USR_STACK                         000002E4  Local -- ARM
